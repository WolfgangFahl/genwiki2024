'Adressbücher':
  param_list:
    - name: limit
      type: int
      default_value: 50
  ask: |
    {{#ask: [[Concept:AddressBook]]
    |mainlabel=AddressBook
    |?AddressBook id = id
    |?AddressBook title = title
    |?AddressBook subtitle = subtitle
    |?AddressBook year = year
    |?AddressBook pageCount = pageCount
    |?AddressBook location = location
    |limit={{limit}}
    }}
'WikidataItemsNearItem':
  # This query finds Wikidata items near a specified Wikidata item.
  # It uses the Wikidata Query Service to find places within a given radius
  # of the specified item and returns them ordered by distance.
  param_list:
    - name: item
      type: WikidataItem
      default_value: Q878253  # Schloss Weimar
    - name: radius
      type: float
      default_value: 0.5 # 0.5 km
    - name: limit
      type: int
      default_value: 50
  sparql: |
    #defaultView:Map
    SELECT ?place ?placeLabel ?location ?dist
    WHERE {
      # coordinates of the item
      wd:{{ item }} wdt:P625 ?itemLoc .
      SERVICE wikibase:around {
        ?place wdt:P625 ?location .
        bd:serviceParam wikibase:center ?itemLoc .
        bd:serviceParam wikibase:radius "{{ radius }}" .
        bd:serviceParam wikibase:distance ?dist.
      }
      # Optional: Filter for specific types of places
      # FILTER EXISTS {
      #   ?place wdt:P31/wdt:P279* wd:Q41176 . # Instance of building or subclass of building
      # }
      FILTER(?place != wd:{{item}}) # Exclude item itself
      SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
    }
    ORDER BY ASC(?dist)
    LIMIT {{ limit }}
'WikidataItemsCoordinates':
  # This query retrieves coordinates for multiple Wikidata items using a VALUES clause
  param_list:
    - name: items
      type: str
      default_value: "wd:Q1729 wd:Q7070"  # Erfurt/Eisenach
  sparql: |
    SELECT ?item ?itemLabel ?coordinates
    WHERE {
      VALUES ?item { {{ items }} }

      # Get the label (name) using rdfs:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "en")

      # Get the coordinates
      ?item wdt:P625 ?coordinates .
    }
'WikidataItemHasParts':
  param_list:
    - name: items
      type: str
      default_value: "wd:Q27509" # Central Europe
    - name: lang
      type: str
      default_value: de
  sparql: |
    SELECT ?part ?partLabel WHERE {
      VALUES ?item { {{ items }} }
      # part of
      ?item wdt:P527 ?part .
      # Get the label (name) using rdf:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "{{lang}}")
    }
'WikidataLookup':
  param_list:
    - name: item
      type: WikidataItem
      default_value: Q255385 # Miastko
    - name: lang
      type: str
      default_value: de
  sparql: |
    SELECT DISTINCT ?item ?itemLabel ?coordinates ?intermediateAdmin ?intermediateAdminLabel ?level ?iso_code
    WHERE {
      BIND(wd:{{item}} AS ?item)

      # Get the label (name) using rdf:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "{{lang}}")

      # Get the coordinates
      OPTIONAL { ?item wdt:P625 ?coordinates. }

      # Navigate up the administrative hierarchy
      ?item wdt:P131* ?intermediateAdmin .

      # Get labels for intermediate admin levels
      ?intermediateAdmin rdfs:label ?intermediateAdminLabel .
      FILTER(LANG(?intermediateAdminLabel) = "{{lang}}")

      # Find the country level
      ?item wdt:P131* / wdt:P31/wdt:P279* wd:Q6256 .

      # Exclude the item itself from the hierarchy
      FILTER (?intermediateAdmin != ?item)

      # Optional ISO code for countries (ISO 3166-1 alpha-2)
      OPTIONAL { ?intermediateAdmin wdt:P297 ?country_iso_code. BIND("3" AS ?level)}

      # Optional ISO code for regions (ISO 3166-2)
      OPTIONAL { ?intermediateAdmin wdt:P300 ?region_iso_code BIND("4" AS ?level)}
      BIND(COALESCE(?country_iso_code, ?region_iso_code) AS ?iso_code)
      FILTER(BOUND(?iso_code))
    } ORDER BY DESC(?level)
'WikidataLookupByGeoNamesID':
  param_list:
    - name: geonames_id
      type: str
      default_value: "2812482"  # Example GeoNames ID for Weimar
    - name: lang
      type: str
      default_value: en
  sparql: |
    SELECT ?item ?itemLabel
    WHERE {
      ?item wdt:P1566 "{{geonames_id}}" .

      # Get the label (name) using rdfs:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "{{lang}}")
    }
'WikidataLookupByNutsCode':
  param_list:
    - name: nuts_code
      type: str
      default_value: "DE731"  # Example Nuts Code for Kassel
    - name: lang
      type: str
      default_value: de
  sparql: |
    SELECT ?item ?itemLabel
    WHERE {
      ?item wdt:P605 "{{nuts_code}}" .

      # Get the label (name) using rdfs:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "{{lang}}")
    }

WikidataItemNameAndCoordinates:
  # This query retrieves the name and coordinates of a specified Wikidata item.
  # It uses the standard notation with rdf:label instead of the wikibase:label service.
  param_list:
    - name: item
      type: WikidataItem
      default_value: Q183 # Deutschland
  sparql: |
    SELECT ?item ?itemLabel ?coordinates
    WHERE {
      BIND(wd:{{ item }} AS ?item)

      # Get the label (name) using rdf:label
      ?item rdfs:label ?itemLabel .
      FILTER(LANG(?itemLabel) = "de")

      # Get the coordinates
      OPTIONAL { ?item wdt:P625 ?coordinates. }
    }
# Abfragen für die Adressansicht
# Diese Abfragen beziehen sich auf die kombinierte Ansicht der
# Weimarer Adressbücher von 1851 und 1853.
# Sie demonstrieren verschiedene Aspekte der Datenanalyse und -abfrage.
Gesamtanzahl:
  # Zählt die Gesamtanzahl der Einträge in der Adressansicht
  sql: |
    SELECT COUNT(*) AS Anzahl FROM address

Stichprobe:
  # Gibt eine Stichprobe von {{ limit }} Einträgen aus der Adressansicht zurück
  param_list:
    - name: limit
      type: int
      default_value: 7
  sql: |
    SELECT * FROM address
    LIMIT {{ limit }}

BerufStatistik:
  # Zeigt die Top {{ limit }} Berufe mit ihrer Häufigkeit
  param_list:
    - name: limit
      type: int
      default_value: 15
  sql: |
    SELECT occupation AS Beruf, COUNT(*) AS Anzahl
    FROM address
    GROUP BY occupation
    ORDER BY Anzahl DESC
    LIMIT {{ limit }}

PersonenSuche:
  # Sucht nach {{ limit }} Personen basierend auf Namen oder Beruf
  # Parameter: {{ suchbegriff }}
  param_list:
    - name: suchbegriff
      type: str
      default_value: Ziegler
    - name: limit
      type: int
      default_value: 20
  sql: |
    SELECT
        firstname AS Vorname,
        lastname AS Nachname,
        occupation AS Beruf,
        location AS Ort,
        year AS Jahr
    FROM address
    WHERE lastname LIKE '%{{suchbegriff}}%'
       OR firstname LIKE '%{{suchbegriff}}%'
       OR company_name LIKE '%{{suchbegriff}}%'
       OR occupation LIKE '%{{suchbegriff}}%'
    ORDER BY lastname, firstname, occupation, year
    LIMIT {{ limit }}

StraßenStatistik:
#
# Zählt die top {{limit}} Strasseneinträge zu {{straße}}
#
  param_list:
    - name: limit
      type: int
      default_value: 20
    - name: straße
      type: str
      default_value: Frauen
  sql: |
    SELECT
        count(*),
        street
    FROM "address"
        where street like "%{{straße}}%"
    group  by street
    order by 1 desc
    LIMIT {{ limit }}

StraßenVergleich:
  # Vergleicht die Anzahl der Einträge zwischen zwei Jahren für einen bestimmten Ort
  # Parameter: {{straße}}
  param_list:
    - name: straße
      type: str
      default_value: Frauen
  sql: |
    SELECT
      '1851' AS Jahr,
      COUNT(*) AS Anzahl
    FROM weimarTH1851
    WHERE street like '%{{straße}}%'
    UNION ALL
    SELECT
      '1853' AS Jahr,
      COUNT(*) AS Anzahl
    FROM weimarTH1853
    WHERE street like '%{{straße}}%'
